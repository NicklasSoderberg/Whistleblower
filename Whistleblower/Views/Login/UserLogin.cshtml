@model Whistleblower.Models.LoginModel

@{
    ViewBag.Title = "UserLogin";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@using (Html.BeginForm("UserLogin", "Login", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <div class="form-titel">
            <img src="~/images/omegapoint.png">
        </div>
    </div>

    <hr />

    <div class="form-body">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-titel">
            <h3>Följ upp ditt ärende</h3>
        </div>
    </div>

    <div class="container">
        <div class="form-body">
            <div class="form-group">
                <div class="col-lg-12 col-md-12 col-sm-12">
                    @Html.RequiredLabelFor(model => model.UserName, htmlAttributes: new { @class = "control-label" })
                    <style>
                        input::-webkit-outer-spin-button,
                        input::-webkit-inner-spin-button {
                            -webkit-appearance: none;
                            margin: 0;
                        }

                        input[type="number"] {
                            -moz-appearance: textfield;
                        }
                    </style>
                    @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-body">
            <div class="form-group ">
                <div class="col-lg-12 col-md-12 col-sm-12">
                    @Html.RequiredLabelFor(model => model.Password, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @id = "password-input" } })
                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    <input type="checkbox" onclick="myFunction()"> Visa lösenord

                    <div class="form-group ">
                        <p id="text" style="display:none">WARNING! Caps lock is ON.</p>

                        @Html.ValidationMessage("LogOnError", new { @class = "text-danger" })
                        <input type="submit" value="Login" class="btn btn-default" />
                    </div>
                </div>
            </div>
        </div>


            


    </div>


}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        var input = document.getElementById("password-input");
        var text = document.getElementById("text");
        input.addEventListener("keyup", function (event) {

            if (event.getModifierState("CapsLock")) {
                text.style.display = "block";
            } else {
                text.style.display = "none"
            }
        });

        function myFunction() {
            var x = document.getElementById("password-input");
            if (x.type === "password") {
                x.type = "text";
            } else {
                x.type = "password";
            }
        }
    </script>
}
